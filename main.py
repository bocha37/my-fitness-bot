from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
import asyncio

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7572534113:AAFdRB_U0KSVK0rCTYlnPgd_Z2-Ij0WXZ0k"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î)
questions = []

# === API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å WebApp ===
async def receive_question(request):
    try:
        data = await request.json()
        question_text = data.get("question")
        user_id = data.get("user_id")

        if question_text and user_id:
            questions.append({"user_id": user_id, "question": question_text})
            print(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {question_text}")
            return web.json_response({"status": "ok"})
        else:
            return web.json_response({"status": "error", "message": "Invalid data"}, status=400)
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        return web.json_response({"status": "error", "message": "Server error"}, status=500)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ë–ñ–£", web_app={"url": "https://fitnessbo4a-webapp.vercel.app"})], 
        [InlineKeyboardButton(text="‚úâÔ∏è –õ–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å", web_app={"url": "https://fitnessbo4a-webapp.vercel.app/question.html"})] 
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=keyboard)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ + –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ===
async def start_bot_and_server():
    app = web.Application()
    app.router.add_post('/question', receive_question)  # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, port=8080)
    await site.start()

    print("–ë–æ—Ç –∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω—ã...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start_bot_and_server())